{"version":3,"file":"static/js/945.c9b9a82c.chunk.js","mappings":"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","sources":["components/ContactsListItem/ContactsListItem.styled.jsx","redux/contacts/selectors.js","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/Error/Error.styled.jsx","redux/filter/selectors.js","components/ContactsList/ContactsList.jsx","components/ContactsForm/ContactsForm.styled.jsx","helpers/validationSchema.js","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  background-color: transparent;\n  border: none;\n  border: 2px solid tomato;\n  border-radius: 5px;\n  cursor: pointer;\n  padding: 6px;\n  font-size: 14px;\n  align-items: center;\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Button, Item } from './ContactsListItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState } from 'react';\n\nexport const ContactsListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const [deletingContactId, setDeletingContactId] = useState(null);\n\n  return (\n    <Item>\n      {name}: {number}\n      <Button\n        onClick={() => {\n          setDeletingContactId(id);\n          dispatch(deleteContact(id)).then(() => setDeletingContactId(null));\n        }}\n        // disabled={isLoading}\n      >\n        Delete\n        {deletingContactId === id && isLoading && <Loader size={12} />}\n      </Button>\n    </Item>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n","import styled from 'styled-components';\n\nexport const ErrorMessage = styled.p`\n  color: red;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { ContactsListItem } from 'components/ContactsListItem/ContactsListItem';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { List } from './ContactsList.styled';\nimport { ErrorMessage } from 'components/Error/Error.styled';\nimport { selectVisibleContacts } from 'redux/filter/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (!visibleContacts?.length && !isLoading && !error) {\n    return <ErrorMessage>No contacts</ErrorMessage>;\n  }\n\n  if (error) {\n    <ErrorMessage>{error} </ErrorMessage>;\n  }\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactsListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  width: 245px;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n","import * as yup from 'yup';\nimport 'yup-phone-lite';\n\nexport const validationSchema = yup.object({\n  name: yup.string().min(2).max(32).required('This field is required'),\n  number: yup\n    .string()\n    .phone(\n      null,\n      `Please enter a valid phone number in an international format. Example: +380 50-123-4567`\n    )\n    .required('This field is required'),\n});\n","import { Form, Label } from './ContactsForm.styled';\nimport { Field, ErrorMessage, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { validationSchema } from 'helpers/validationSchema';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactsForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, action) => {\n    const isInContacts = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      return alert(`${values.name} is already in contacts`);\n    }\n\n    dispatch(addContact(values));\n\n    action.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" render={message => <p>{message}</p>} />\n        </Label>\n        <Label>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorMessage name=\"number\" render={message => <p>{message}</p>} />\n        </Label>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={filter}\n      onChange={onFilterChange}\n      placeholder=\"Search by name\"\n    />\n  );\n};\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from 'components/Container/Container.styled';\n\nexport default function Contacts() {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n\n      <ContactsForm />\n\n      <h2>Contacts</h2>\n      <p>Find contacts by name</p>\n      <Filter />\n      <ContactsList />\n    </Container>\n  );\n}\n"],"names":["Item","styled","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactsListItem","id","name","number","dispatch","useDispatch","useSelector","useState","deletingContactId","setDeletingContactId","onClick","deleteContact","then","Loader","size","List","ErrorMessage","selectFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactsList","visibleContacts","useEffect","fetchContacts","length","map","Form","FormikForm","Label","validationSchema","yup","min","max","required","phone","ContactsForm","initialValues","onSubmit","values","action","some","alert","addContact","resetForm","type","title","render","message","Filter","value","onChange","e","setFilter","target","placeholder","Contacts"],"sourceRoot":""}